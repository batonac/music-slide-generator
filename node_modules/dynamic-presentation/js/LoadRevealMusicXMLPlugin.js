/* globals Reveal */
import { AudioPlayer } from '../js/AudioPlayer.js?v=3.0.0';
import { MIDIPlayer } from '../js/MIDIPlayer.js?v=3.0.0';
import { MusicToolkit } from '../js/MusicToolkit.js?v=3.0.0';
import { MusicXMLTransformer } from '../js/MusicXMLTransformer.js?v=3.0.0';
import { PianoRollToolkit } from '../js/PianoRollToolkit.js?v=3.0.0';
import { RevealMusicXML } from '../js/RevealMusicXML.js?v=3.0.0';
import { TextOnlyToolkit } from '../js/TextOnlyToolkit.js?v=3.0.0'; // Depends on PianoRollToolkit
import { urlParam } from '../js/urlParam.js?v=3.0.0';
import { XMLPlayer } from '../js/XMLPlayer.js?v=3.0.0'; // Depends on MIDIPlayer
import { YouTubePlayer } from '../js/YouTubePlayer.js?v=3.0.0';
import { SpotifyPlayer } from '../js/SpotifyPlayer.js?v=3.0.0';
import { BandcampPlayer } from '../js/BandcampPlayer.js?v=3.0.0';
import { AppleMusicPlayer } from '../js/AppleMusicPlayer.js?v=3.0.0';
import { VoidPlayer } from '../js/VoidPlayer.js?v=3.0.0';

// See https://book.verovio.org/first-steps/getting-started.html
// Only start doing stuff once the verovio is loaded
document.addEventListener('DOMContentLoaded', (event) => {
  main();
});

// Function to check if a font is loaded
function isFontLoaded(fontName) {
  return document.fonts.check(`1em ${fontName}`);
}

// Function to wait for font loading
function waitForFont(fontName, callback) {
  let count = 0;
  function checkFont() {
    if (isFontLoaded(fontName)) {
      // Font is loaded, execute the callback
      callback();
    } else {
      // Font is not loaded, check again after a short delay
      count++;
      if (count > 20) {
        console.log('Font failed to load quickly');
        callback();
      } else {
        setTimeout(checkFont, 100);
      }
    }
  }

  // Start checking for the font
  checkFont();
}

function main () {
  let mxt = new MusicXMLTransformer();
  let tk;

  window.PianoRollToolkit = PianoRollToolkit;
  window.TextOnlyToolkit = TextOnlyToolkit;
  window.MusicToolkit = MusicToolkit;
  if (typeof window.verovio !== 'undefined') {
    window.VerovioToolkit = window.verovio.toolkit;
  }

  window.AudioPlayer = AudioPlayer;
  window.MIDIPlayer = MIDIPlayer;
  window.XMLPlayer = XMLPlayer;
  window.YouTubePlayer = YouTubePlayer;
  window.SpotifyPlayer = SpotifyPlayer;
  window.BandcampPlayer = BandcampPlayer;
  window.AppleMusicPlayer = AppleMusicPlayer;
  window.VoidPlayer = VoidPlayer;

  if (urlParam('toolkit') === 'verovio') {
    tk = MusicToolkit;
  } else if (urlParam('toolkit') === 'veroviostatic') {
    // Backwards compatibility for former VerovioLineWrapper.
    tk = MusicToolkit;
  } else if (urlParam('toolkit') === 'text') {
    tk = TextOnlyToolkit;
  } else {
    tk = PianoRollToolkit;
  }
  let rmx = new RevealMusicXML(tk, mxt);
  window.rmx = rmx;

  // Make sure the text font is loaded before initializing the slides to guarantee lyric bounding box calculations are correct
  const font = new FontFace(
    "Fira Sans Extra Condensed",
    "url(https://fonts.gstatic.com/s/firasansextracondensed/v10/NaPKcYDaAO5dirw6IaFn7lPJFqXmS-M9Atn3wgda1fKuulWcrE5Hcg.woff2)"
  );
  document.fonts.add(font);
  document.fonts.load('1em Fira Sans Extra Condensed');
  const fontName = 'Fira Sans Extra Condensed';
  waitForFont(fontName, function() {
    // Code to execute when the font is loaded
    // TODO: Use Reveal.registerPlugin?
    rmx.init().then(
      () => Reveal.slide(0, 0),
      () => Reveal.slide(0, 0)
    );
  });
}
