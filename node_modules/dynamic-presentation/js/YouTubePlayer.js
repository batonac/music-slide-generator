/* globals jQuery */

import { VoidPlayer } from '../js/VoidPlayer.js?v=1.8.0';

export class YouTubePlayer extends VoidPlayer {
  constructor (url, onUpdate, onStop, onEnd, playbackRate) {
    super(url, onUpdate, onStop, onEnd, playbackRate);
    this._youtubeCode = this._extractVideoID(url);
    this._youtubeUrl = 'https://www.youtube.com/embed/' + this._youtubeCode;
    this._player = window.ytplayer;
    this._player.loadVideoByUrl('');
    // This function might round down to a number like 0.25, 0.5, 0.75, ..., 2?
    // On YouTube's pages, you have more control, see https://webapps.stackexchange.com/a/54506
    this._playbackRate = playbackRate;
    this._player.setPlaybackRate(this._playbackRate);
    jQuery('#youtube-player').hide();
  }

  hide () {
    this._player.loadVideoByUrl('');
    jQuery('#youtube-player').hide();
  }

  show () {
    jQuery('#spotify-player').hide();
    jQuery('#bandcamp-player').hide();
    jQuery('#apple-music-player').hide();
    if (
      !this._player.getVideoUrl() ||
      (this._player.getVideoUrl() &&
        this._extractVideoID(this._player.getVideoUrl()) !== this._youtubeCode)
    ) {
      this._player.cueVideoByUrl(this._youtubeUrl);
      this._player.setPlaybackRate(this._playbackRate);
    }
    jQuery('#youtube-player').show();
  }

  play () {
    this._player.playVideo();
    this._playing = true;
    this._update(true);
  }
  pause () {
    this._player.pauseVideo();
    this._playing = false;
  }
  stop () {
    // TODO: Fix bug where 2 of the same YouTube video causes stopping on each pause
    if (
      this._player.getVideoUrl() &&
      this._extractVideoID(this._player.getVideoUrl()) === this._youtubeCode
    ) {
      // Only stop and hide the video if this video is playing
      //  (otherwise its another YouTubePlayer instance using the same this._player)
      this._player.stopVideo();
      jQuery('#youtube-player').hide();
    }
    this.onEnd();
    this.onStop();
  }
  getTimestamp () {
    return this._player.getCurrentTime() * 1000;
  }

  // https://www.labnol.org/code/19797-regex-youtube-id/
  // See also FileUploadHelperTrait.php in My.Hymnary
  _extractVideoID (url) {
    var regExp =
      /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))(t=[^#&?]*&)?\??(v=)?([^#&?]*).*/;
    var match = url.match(regExp);
    if (match && match[9].length === 11) {
      return match[9];
    }
    console.log('Could not extract video ID.');
    return false;
  }
}
